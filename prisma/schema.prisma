// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id          Int      @id @default(autoincrement())
  videohub    Videohub @relation(fields: [videohub_id], references: [id], onDelete: Cascade)
  videohub_id Int
  output      Output   @relation(fields: [videohub_id, output_id], references: [videohub_id, id], onDelete: Cascade)
  output_id   Int
  input       Input    @relation(fields: [videohub_id, input_id], references: [videohub_id, id], onDelete: Cascade)
  input_id    Int
  start       DateTime
  end         DateTime

  day_of_week       Int
  repeat_every_week Boolean?

  @@map("events")
}

model Videohub {
  id                Int                @id @default(autoincrement())
  ip                String             @unique
  name              String
  version           String
  inputs            Input[]
  outputs           Output[]
  events            Event[]
  pushbuttons       PushButton[]
  pushbuttonactions PushButtonAction[]
  VideohubActivity  VideohubActivity[]

  @@map("videohubs")
}

model Input {
  id                Int
  videohub          Videohub           @relation(fields: [videohub_id], references: [id], onDelete: Cascade)
  videohub_id       Int
  label             String
  outputs           Output[]
  events            Event[]
  pushbuttonactions PushButtonAction[]

  @@id([videohub_id, id], name: "videohub_input")
  @@map("inputs")
}

model Output {
  id                Int
  videohub          Videohub           @relation(fields: [videohub_id], references: [id], onDelete: Cascade)
  videohub_id       Int
  input             Input?             @relation(fields: [videohub_id, input_id], references: [videohub_id, id], onDelete: Cascade)
  input_id          Int?
  label             String
  Event             Event[]
  pushbuttonactions PushButtonAction[]

  @@id([videohub_id, id], name: "videohub_output")
  @@map("outputs")
}

model PushButtonAction {
  id            Int        @id @default(autoincrement())
  videohub      Videohub   @relation(fields: [videohub_id], references: [id], onDelete: Cascade)
  videohub_id   Int
  output        Output     @relation(fields: [videohub_id, output_id], references: [videohub_id, id], onDelete: Cascade)
  output_id     Int
  input         Input      @relation(fields: [videohub_id, input_id], references: [videohub_id, id], onDelete: Cascade)
  input_id      Int
  pushbutton    PushButton @relation(fields: [pushbutton_id], references: [id], onDelete: Cascade)
  pushbutton_id Int

  @@map("pushbuttons_actions")
}

model PushButton {
  id          Int                @id @default(autoincrement())
  videohub    Videohub           @relation(fields: [videohub_id], references: [id], onDelete: Cascade)
  videohub_id Int
  label       String             @unique
  actions     PushButtonAction[]
  color       String?

  @@map("pushbuttons")
}

model VideohubActivity {
  id          Int      @id @default(autoincrement())
  videohub    Videohub @relation(fields: [videohub_id], references: [id], onDelete: Cascade)
  videohub_id Int
  title       String
  description String?  @db.MediumText
  icon        String
  time        DateTime

  @@map("videohub_activities")
}

// Accounts
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  role          Role?     @relation(fields: [role_id], references: [id])
  role_id       Int?
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  users       User[]
  permissions RolePermission[]
  Credential  Credential[]

  @@map("roles")
}

model RolePermission {
  permission String
  role       Role   @relation(fields: [role_id], references: [id])
  role_id    Int

  @@id([role_id, permission], name: "role_permissions")
  @@map("roles_permissions")
}

model Credential {
  id           Int     @id @default(autoincrement())
  username     String  @unique /// @encrypted
  usernameHash String? @unique @map("username_hash") /// @encryption:hash(username)
  password     String /// @encrypted
  role         Role?   @relation(fields: [role_id], references: [id])
  role_id      Int?
  @@map("credentials")
}
